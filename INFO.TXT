
XERN is a simple non-pre-emptive unix-like ARM OS I wrote for QEMU versatilepb machine(choice was based on availability of reference sources) to test my basic understanding of operating systems and also for fun. The kernel comes with no drivers for any specific keyboard and LCD devices but it comes with a UART I/O driver, SDCARD driver and TIMER driver and also uses an EXT2 filesytem. It has 39 syscalls. Some of these syscalls are specific to this OS.

============================================== SYSCALLS ==================================================

getpid, getppid, getuid, getgid, setuid, setgid, fork, exec, wait, exit, pipe, kill, sleep, sbrk,
creat, mkdir,rmdir, link, unlink, symlink, readlink, open, read, write, close, lseek, dup2, getdent, stat, 
chdir, getcwd, chown, chmod, fexist, readpass, get_procs, get_boottime, setlogin, getlogin

others: getpwd, print functions, string functions etc.


=========================================== USER BINARIES ================================================

cat, chmod, chown, cp, echo, grep, fgrep, help, id, kill, ln, locate, flocate, ls, mkdir, mv, ps, pwd,
readlink, rm, rmdir, sleep, stat, unlink, uptime, whoami
Others: init, login, sh, loop and test

-----------------------------------------------------------------------------------------------------------

Login accounts: 

username       password
-------        --------
root           toor
mik3           31337

How to start OS:
Prerequisties:
=> qemu-system-arm

=>> cd to the build folder
=>> Enter './run.sh' to start it in QEMU  

============================================= HOW TO COMPILE ==========================================

--------------------------------------------------[KERNEL]---------------------------------------------
Prerequisites:

=> qemu-system-arm
=> arm-none-eabi-gcc
=> arm-none-eabi-ld 
=> arm-none-eabi-objcopy
=> make
Others:  rm

=>> cd to the XERN folder
=>> Enter 'make' to compile
=>> cd to the build folder
=>> enter './run.sh' to start OS in QEMU

Note: "/usr/lib/gcc/arm-none-eabi/9.2.1/libgcc.a" has to exist. -- (change the version to the one available on your system(9.2.1) )  

--------------------------------------------[USER PROGRAMS]-----------------------------------------

Prerequisites:

=> arm-none-eabi-gcc 
=> arm-none-eabi-ld

=>> cd to the UPROGS/src folder
=>> Enter './compile.sh tool'. Don't add the .c 
=>> Compiled user programs are stored at UPROGS/bin

Note: "/usr/lib/gcc/arm-none-eabi/9.2.1/libgcc.a" has to exist. -- (change the version to the one available on your system(9.2.1) )

Mount the virtual SDCARD in the build folder and copy the compiled program to it
                          


